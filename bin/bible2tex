#!/usr/bin/env ruby

require 'byebug'
require 'fileutils'

bookname = File.basename(Dir.getwd)

dir_path = File.dirname(Dir.getwd).split('/')
unless %w[books collections].include? dir_path[-1]
  abort('ERROR: Must run in "$BIBLE/books/<book>" directory.')
end

doc_name = "./#{bookname}_doc_body.tex"
FileUtils.chmod(0777, doc_name) if File.file?(doc_name)
fidd = File.open("#{doc_name}", 'w')

pre_name = "./#{bookname}_pre_body.tex"
FileUtils.chmod(0777, pre_name) if File.file?(pre_name)
fidp = File.open("#{pre_name}", 'w')

# from .bible file to .tex
prev_line_is_text = false
quote_depth = 0
reference = '1:1'
File.open("./#{bookname}.bible").each_with_index do |line, index|
  line.chomp!.rstrip!
  line.gsub!('**', '$\dagger$')
  line.gsub!('HFILL', '\hfill{}')
  line.gsub!(/^ +--- /, '')

  line.gsub!('[?]', '\textsubscript ?') # plural
  line.gsub!('[p]', '\textsubscript p') # plural
  line.gsub!('[u]', '\textsubscript u') # plural
  line.gsub!(' [Elohim]', '\textsubscript E') # plural

  line.gsub!(/<([^>]+)>/, '\1\textsubscript x') # inferred

  # line.gsub!(/ \[[^\] ]+\] /, ' ')  # alternates
  # line.gsub!(/ \[[^\] ]+\]$/, ' ')  # alternates
  # line.gsub!(/ \[[^\] ]+\],/, ',')  # alternates
  # line.gsub!(/ \[[^\] ]+\];/, ';')  # alternates
  # line.gsub!(/ \[[^\] ]+\]:/, ':')  # alternates
  # line.gsub!(/ \[[^\] ]+\]\./, '.') # alternates
  # line.gsub!(/ \[[^\] ]+\]!/, '!')  # alternates
  # line.gsub!(/ \[[^\] ]+\]\?/, '?') # alternates

  exit if line.match?(/^__END__/)

  indent = line[/^ +/] || ''
  abort "ERROR: indent not multiple of two ∷ '#{line}'" unless indent.length.modulo(2).zero?

  byebug if line.match?(/^BYEBUG/)

  if line.match(/^$/)
    prev_line_is_text = false
    fidd.puts line
    fidd.flush

    fidp.puts line
    fidp.flush
    next

  elsif line.match?(/# Book:/)
    _pre, bookname = line.split(':')
    fidd.puts "\\pagenumbering{gobble}"
    fidd.puts "\\clearpage"
    fidd.puts "\\thispagestyle{empty}"
    fidd.puts "\\chapter{#{bookname.strip}}"
    # fidd.puts "\\clearpage"
    fidd.puts "\\pagenumbering{arabic}"
    fidd.flush

    fidp.puts "\\pagenumbering{gobble}"
    fidp.puts "\\clearpage"
    fidp.puts "\\thispagestyle{empty}"
    fidp.puts "\\chapter{#{bookname.strip}}"
    # fidp.puts "\\clearpage"
    fidp.puts "\\pagenumbering{arabic}"
    fidp.flush

    prev_line_is_text = false
    next

  # elsif line.match?(/^# [^ ]+ \d\d:\d\d$/)
  #   _pre_pre, _pre, reference = line.split(' ')
  #   reference.strip!

  #   next

  elsif line.match?(/^# Section:/)
    _pre, section_text = line.gsub(/RIGHTARROW/, '\\myrightarrow{}').split(':')
    fidd.puts "\\newpage\\section{#{section_text.strip}}"
    fidd.flush

    fidp.puts "\\newpage\\section{#{section_text.strip}}"
    fidp.flush

    prev_line_is_text = false
    next

  # split only in presentation
  elsif line.match?(/^# PresentationSection:/)
    _pre, section_text = line.gsub(/RIGHTARROW/, '\\myrightarrow{}').split(':')
    fidp.puts "\\newpage\\section{#{section_text.strip}}"
    fidp.flush

    prev_line_is_text = false
    next

  elsif line.match?(/^# RJUST: /)
    _pre, text = line.split(':')
    fidd.puts "\\hfill{}#{text.strip}"
    fidd.flush

    fidp.puts "\\hfill{}#{text.strip}"
    fidp.flush

    prev_line_is_text = false
    next

  elsif line.match?(/^# TEX: /)
    _pre, text = line.split(':')
    fidd.puts "\\hfill{}#{text.strip}"
    fidd.flush

    fidp.puts "\\hfill{}#{text.strip}"
    fidp.flush

    # prev_line_is_text = false
    next

  elsif line.match?(/^ *# DOTFILL/)
    fidd.puts "\\dotfill{}"
    fidd.flush

    fidp.puts "\\dotfill{}"
    fidp.flush

    prev_line_is_text = false
    next

  elsif line.match?(/^ *# SEPARATOR/)
    fidd.puts "\\begin{center}\\textbf{$\\ast$~$\\ast$~$\\ast$~$\\ast$~$\\ast$}\\end{center}"
    fidd.flush

    fidp.puts "\\begin{center}\\textbf{$\\ast$~$\\ast$~$\\ast$~$\\ast$~$\\ast$}\\end{center}"
    fidp.flush

    prev_line_is_text = false
    next

  elsif line.match(/^ *#/)
    next

  elsif line.match?(/ *\{/)
    quote_depth += 1

    fidd.puts
    fidp.puts
    case quote_depth
    when 1
      fidd.puts "#{line}\\itshape{}"
      fidd.flush

      fidp.puts "#{line}\\itshape{}"
      fidp.flush
    when 2
      fidd.puts "#{line}\\normalfont\\bfseries{}"
      fidd.flush

      fidp.puts "#{line}\\normalfont\\bfseries{}"
      fidp.flush
    when 3
      fidd.puts "#{line}\\normalfont\\itshape{}"
      fidd.flush

      fidp.puts "#{line}\\normalfont\\itshape{}"
      fidp.flush
    when 4
      fidd.puts "#{line}\\normalfont\\bfseries{}"
      fidd.flush

      fidp.puts "#{line}\\normalfont\\bfseries{}"
      fidp.flush
    when 5
      fidd.puts "#{line}\\normalfont\\itshape{}"
      fidd.flush

      fidp.puts "#{line}\\normalfont\\itshape{}"
      fidp.flush
    end

    prev_line_is_text = false
    fidd.flush
    fidp.flush
    next

  # decrease quote depth
  elsif line.match?(/ *\}/)
    quote_depth -= 1

    if line.match?(/^}$/) && !quote_depth.zero?
      abort("#{index} ∷ #{line}")
    end

    fidd.puts "#{line}"
    fidd.flush

    fidp.puts "#{line}"
    fidp.flush

    prev_line_is_text = false
    next
  end

  if prev_line_is_text
    fidd.puts "#{indent}\\\\"
    fidd.flush

    fidp.puts "#{indent}\\\\"
    fidp.flush
  end

  1.upto(indent.length/2).each do
    fidd.puts "#{indent}\\tab"
    fidd.flush

    fidp.puts "#{indent}\\tab"
    fidp.flush
  end

  fidd.puts line.gsub(/\\dotfill/, '\\\\dotfill')
              .gsub(/#.*/, '')
  fidd.flush

  fidp.puts line.gsub(/\\dotfill/, '\\\\dotfill').gsub(/#.*/, '')
              .gsub(/#.*/, '')
  fidp.flush

  prev_line_is_text = true
end

FileUtils.chmod(0444, doc_name)
FileUtils.chmod(0444, pre_name)
